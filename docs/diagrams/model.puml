@startuml
hide circle
skinparam classAttributeIconSize 0

package "model" {

    class Ingredient {
        - ingredientName: String
        - quantity: int
        + getIngredientName(): String
        + getQuantity(): int
        + setIngredientName(name: String)
        + setQuantity(quantity: int)
        + addQuantity(quantity: int)
        + subtractQuantity(quantity: int)
    }

    package "catalogue" {

        abstract class "{abstract} \n Catalogue<T>" {
            - items: ArrayList<T>
            + addItem(item: T): CommandResult
            + deleteItem(item: T): CommandResult
            + listItems(): CommandResult
            + getItems(): ArrayList<T>
            + updateItem(oldItem: T, newItem: T)
            + findItem(query: String): CommandResult
            + findItem(query: String, mapper: Function<T, String>): CommandResult
            + getItemByName(name: String): T
            + getCatalogueContent(): String
            + getType(): String
        }

        class Inventory {
            + searchSimilarIngredient(ingredient: Ingredient): ArrayList<Ingredient>
            + removeAllIngredients(): CommandResult
            + decreaseQuantity(from: Ingredient, amount: Ingredient): CommandResult
            + getItemByName(name: String): Ingredient
        }

        class Recipe {
            - recipeName: String
            + getRecipeName(): String
            + updateItem(ingredient: Ingredient): CommandResult
            + getItemByName(name: String): Ingredient
        }

        class RecipeBook {
            + searchSimilarRecipe(recipe: Recipe): ArrayList<Recipe>
            + editItem(oldRecipe: Recipe, newRecipe: Recipe): CommandResult
            + getItemByName(name: String): Recipe
        }

        "{abstract} \n Catalogue<T>" <|-- Inventory
        "{abstract} \n Catalogue<T>" <|-- Recipe
        "{abstract} \n Catalogue<T>" <|-- RecipeBook
    }
}

@enduml